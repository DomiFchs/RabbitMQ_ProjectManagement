// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.Configurations;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(ProjectsDbContext))]
    [Migration("20240316014035_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Model.Entities.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FACILITY_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("FACILITY_NAME");

                    b.HasKey("Id");

                    b.ToTable("FACILITIES");
                });

            modelBuilder.Entity("Model.Entities.Projects.AProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PROJECT_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("PROJECT_DESCRIPTION");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int")
                        .HasColumnName("FACILITY_ID");

                    b.Property<int>("State")
                        .HasColumnType("int")
                        .HasColumnName("PROJECT_STATE");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("PROJECT_TITLE");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.ToTable("PROJECTS_BT");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Model.Entities.Projects.ManagementProject", b =>
                {
                    b.HasBaseType("Model.Entities.Projects.AProject");

                    b.Property<int>("LawType")
                        .HasColumnType("int")
                        .HasColumnName("LAW_TYPE");

                    b.ToTable("MANAGEMENT_PROJECTS");
                });

            modelBuilder.Entity("Model.Entities.Projects.RequestFundingProject", b =>
                {
                    b.HasBaseType("Model.Entities.Projects.AProject");

                    b.Property<bool>("IsFfgFunded")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IS_FFG_FUNDED");

                    b.Property<bool>("IsFwfFunded")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IS_FWF_FUNDED");

                    b.ToTable("REQUEST_FUNDING_PROJECTS");
                });

            modelBuilder.Entity("Model.Entities.Projects.AProject", b =>
                {
                    b.HasOne("Model.Entities.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Model.Entities.Projects.ManagementProject", b =>
                {
                    b.HasOne("Model.Entities.Projects.AProject", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Projects.ManagementProject", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Projects.RequestFundingProject", b =>
                {
                    b.HasOne("Model.Entities.Projects.AProject", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Projects.RequestFundingProject", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
